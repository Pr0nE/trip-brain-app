// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: gpt.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelSuggestionClient is the client API for TravelSuggestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelSuggestionClient interface {
	Suggest(ctx context.Context, in *TravelSuggestionRequest, opts ...grpc.CallOption) (TravelSuggestion_SuggestClient, error)
	GetPlaceImage(ctx context.Context, in *PlaceImageRequest, opts ...grpc.CallOption) (*PlaceImageResponse, error)
}

type travelSuggestionClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelSuggestionClient(cc grpc.ClientConnInterface) TravelSuggestionClient {
	return &travelSuggestionClient{cc}
}

func (c *travelSuggestionClient) Suggest(ctx context.Context, in *TravelSuggestionRequest, opts ...grpc.CallOption) (TravelSuggestion_SuggestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TravelSuggestion_ServiceDesc.Streams[0], "/TravelSuggestion/Suggest", opts...)
	if err != nil {
		return nil, err
	}
	x := &travelSuggestionSuggestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TravelSuggestion_SuggestClient interface {
	Recv() (*TravelSuggestionResponse, error)
	grpc.ClientStream
}

type travelSuggestionSuggestClient struct {
	grpc.ClientStream
}

func (x *travelSuggestionSuggestClient) Recv() (*TravelSuggestionResponse, error) {
	m := new(TravelSuggestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *travelSuggestionClient) GetPlaceImage(ctx context.Context, in *PlaceImageRequest, opts ...grpc.CallOption) (*PlaceImageResponse, error) {
	out := new(PlaceImageResponse)
	err := c.cc.Invoke(ctx, "/TravelSuggestion/GetPlaceImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelSuggestionServer is the server API for TravelSuggestion service.
// All implementations must embed UnimplementedTravelSuggestionServer
// for forward compatibility
type TravelSuggestionServer interface {
	Suggest(*TravelSuggestionRequest, TravelSuggestion_SuggestServer) error
	GetPlaceImage(context.Context, *PlaceImageRequest) (*PlaceImageResponse, error)
	mustEmbedUnimplementedTravelSuggestionServer()
}

// UnimplementedTravelSuggestionServer must be embedded to have forward compatible implementations.
type UnimplementedTravelSuggestionServer struct {
}

func (UnimplementedTravelSuggestionServer) Suggest(*TravelSuggestionRequest, TravelSuggestion_SuggestServer) error {
	return status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (UnimplementedTravelSuggestionServer) GetPlaceImage(context.Context, *PlaceImageRequest) (*PlaceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceImage not implemented")
}
func (UnimplementedTravelSuggestionServer) mustEmbedUnimplementedTravelSuggestionServer() {}

// UnsafeTravelSuggestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelSuggestionServer will
// result in compilation errors.
type UnsafeTravelSuggestionServer interface {
	mustEmbedUnimplementedTravelSuggestionServer()
}

func RegisterTravelSuggestionServer(s grpc.ServiceRegistrar, srv TravelSuggestionServer) {
	s.RegisterService(&TravelSuggestion_ServiceDesc, srv)
}

func _TravelSuggestion_Suggest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TravelSuggestionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TravelSuggestionServer).Suggest(m, &travelSuggestionSuggestServer{stream})
}

type TravelSuggestion_SuggestServer interface {
	Send(*TravelSuggestionResponse) error
	grpc.ServerStream
}

type travelSuggestionSuggestServer struct {
	grpc.ServerStream
}

func (x *travelSuggestionSuggestServer) Send(m *TravelSuggestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TravelSuggestion_GetPlaceImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelSuggestionServer).GetPlaceImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TravelSuggestion/GetPlaceImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelSuggestionServer).GetPlaceImage(ctx, req.(*PlaceImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TravelSuggestion_ServiceDesc is the grpc.ServiceDesc for TravelSuggestion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelSuggestion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TravelSuggestion",
	HandlerType: (*TravelSuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaceImage",
			Handler:    _TravelSuggestion_GetPlaceImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Suggest",
			Handler:       _TravelSuggestion_Suggest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gpt.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	SocialAuthorize(ctx context.Context, in *SocialAuthorizeRequest, opts ...grpc.CallOption) (*SocialAuthorizeResponse, error)
	TokenAuthorize(ctx context.Context, in *TokenAuthorizeRequest, opts ...grpc.CallOption) (*TokenAuthorizeResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) SocialAuthorize(ctx context.Context, in *SocialAuthorizeRequest, opts ...grpc.CallOption) (*SocialAuthorizeResponse, error) {
	out := new(SocialAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/Auth/SocialAuthorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) TokenAuthorize(ctx context.Context, in *TokenAuthorizeRequest, opts ...grpc.CallOption) (*TokenAuthorizeResponse, error) {
	out := new(TokenAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/Auth/TokenAuthorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	SocialAuthorize(context.Context, *SocialAuthorizeRequest) (*SocialAuthorizeResponse, error)
	TokenAuthorize(context.Context, *TokenAuthorizeRequest) (*TokenAuthorizeResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) SocialAuthorize(context.Context, *SocialAuthorizeRequest) (*SocialAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialAuthorize not implemented")
}
func (UnimplementedAuthServer) TokenAuthorize(context.Context, *TokenAuthorizeRequest) (*TokenAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAuthorize not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_SocialAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SocialAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/SocialAuthorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SocialAuthorize(ctx, req.(*SocialAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_TokenAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).TokenAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/TokenAuthorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).TokenAuthorize(ctx, req.(*TokenAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SocialAuthorize",
			Handler:    _Auth_SocialAuthorize_Handler,
		},
		{
			MethodName: "TokenAuthorize",
			Handler:    _Auth_TokenAuthorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt.proto",
}

// PlaceDetailsClient is the client API for PlaceDetails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceDetailsClient interface {
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (PlaceDetails_GetDetailClient, error)
}

type placeDetailsClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceDetailsClient(cc grpc.ClientConnInterface) PlaceDetailsClient {
	return &placeDetailsClient{cc}
}

func (c *placeDetailsClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (PlaceDetails_GetDetailClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaceDetails_ServiceDesc.Streams[0], "/PlaceDetails/GetDetail", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeDetailsGetDetailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaceDetails_GetDetailClient interface {
	Recv() (*GetDetailResponse, error)
	grpc.ClientStream
}

type placeDetailsGetDetailClient struct {
	grpc.ClientStream
}

func (x *placeDetailsGetDetailClient) Recv() (*GetDetailResponse, error) {
	m := new(GetDetailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaceDetailsServer is the server API for PlaceDetails service.
// All implementations must embed UnimplementedPlaceDetailsServer
// for forward compatibility
type PlaceDetailsServer interface {
	GetDetail(*GetDetailRequest, PlaceDetails_GetDetailServer) error
	mustEmbedUnimplementedPlaceDetailsServer()
}

// UnimplementedPlaceDetailsServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceDetailsServer struct {
}

func (UnimplementedPlaceDetailsServer) GetDetail(*GetDetailRequest, PlaceDetails_GetDetailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedPlaceDetailsServer) mustEmbedUnimplementedPlaceDetailsServer() {}

// UnsafePlaceDetailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceDetailsServer will
// result in compilation errors.
type UnsafePlaceDetailsServer interface {
	mustEmbedUnimplementedPlaceDetailsServer()
}

func RegisterPlaceDetailsServer(s grpc.ServiceRegistrar, srv PlaceDetailsServer) {
	s.RegisterService(&PlaceDetails_ServiceDesc, srv)
}

func _PlaceDetails_GetDetail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDetailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaceDetailsServer).GetDetail(m, &placeDetailsGetDetailServer{stream})
}

type PlaceDetails_GetDetailServer interface {
	Send(*GetDetailResponse) error
	grpc.ServerStream
}

type placeDetailsGetDetailServer struct {
	grpc.ServerStream
}

func (x *placeDetailsGetDetailServer) Send(m *GetDetailResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PlaceDetails_ServiceDesc is the grpc.ServiceDesc for PlaceDetails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceDetails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlaceDetails",
	HandlerType: (*PlaceDetailsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDetail",
			Handler:       _PlaceDetails_GetDetail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gpt.proto",
}

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentClient interface {
	BuyCredit(ctx context.Context, in *BuyCreditRequest, opts ...grpc.CallOption) (*BuyCreditResponse, error)
	FetchPrices(ctx context.Context, in *FetchPricesRequest, opts ...grpc.CallOption) (*FetchPricesResponse, error)
}

type paymentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClient(cc grpc.ClientConnInterface) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) BuyCredit(ctx context.Context, in *BuyCreditRequest, opts ...grpc.CallOption) (*BuyCreditResponse, error) {
	out := new(BuyCreditResponse)
	err := c.cc.Invoke(ctx, "/Payment/BuyCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) FetchPrices(ctx context.Context, in *FetchPricesRequest, opts ...grpc.CallOption) (*FetchPricesResponse, error) {
	out := new(FetchPricesResponse)
	err := c.cc.Invoke(ctx, "/Payment/FetchPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
// All implementations must embed UnimplementedPaymentServer
// for forward compatibility
type PaymentServer interface {
	BuyCredit(context.Context, *BuyCreditRequest) (*BuyCreditResponse, error)
	FetchPrices(context.Context, *FetchPricesRequest) (*FetchPricesResponse, error)
	mustEmbedUnimplementedPaymentServer()
}

// UnimplementedPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (UnimplementedPaymentServer) BuyCredit(context.Context, *BuyCreditRequest) (*BuyCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCredit not implemented")
}
func (UnimplementedPaymentServer) FetchPrices(context.Context, *FetchPricesRequest) (*FetchPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPrices not implemented")
}
func (UnimplementedPaymentServer) mustEmbedUnimplementedPaymentServer() {}

// UnsafePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServer will
// result in compilation errors.
type UnsafePaymentServer interface {
	mustEmbedUnimplementedPaymentServer()
}

func RegisterPaymentServer(s grpc.ServiceRegistrar, srv PaymentServer) {
	s.RegisterService(&Payment_ServiceDesc, srv)
}

func _Payment_BuyCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).BuyCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Payment/BuyCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).BuyCredit(ctx, req.(*BuyCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_FetchPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).FetchPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Payment/FetchPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).FetchPrices(ctx, req.(*FetchPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payment_ServiceDesc is the grpc.ServiceDesc for Payment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyCredit",
			Handler:    _Payment_BuyCredit_Handler,
		},
		{
			MethodName: "FetchPrices",
			Handler:    _Payment_FetchPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt.proto",
}

// GeneralClient is the client API for General service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetCurrentVersion(ctx context.Context, in *GetCurrentVersionRequest, opts ...grpc.CallOption) (*GetCurrentVersionResponse, error)
}

type generalClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralClient(cc grpc.ClientConnInterface) GeneralClient {
	return &generalClient{cc}
}

func (c *generalClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/General/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalClient) GetCurrentVersion(ctx context.Context, in *GetCurrentVersionRequest, opts ...grpc.CallOption) (*GetCurrentVersionResponse, error) {
	out := new(GetCurrentVersionResponse)
	err := c.cc.Invoke(ctx, "/General/GetCurrentVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServer is the server API for General service.
// All implementations must embed UnimplementedGeneralServer
// for forward compatibility
type GeneralServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetCurrentVersion(context.Context, *GetCurrentVersionRequest) (*GetCurrentVersionResponse, error)
	mustEmbedUnimplementedGeneralServer()
}

// UnimplementedGeneralServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralServer struct {
}

func (UnimplementedGeneralServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGeneralServer) GetCurrentVersion(context.Context, *GetCurrentVersionRequest) (*GetCurrentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentVersion not implemented")
}
func (UnimplementedGeneralServer) mustEmbedUnimplementedGeneralServer() {}

// UnsafeGeneralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServer will
// result in compilation errors.
type UnsafeGeneralServer interface {
	mustEmbedUnimplementedGeneralServer()
}

func RegisterGeneralServer(s grpc.ServiceRegistrar, srv GeneralServer) {
	s.RegisterService(&General_ServiceDesc, srv)
}

func _General_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/General/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _General_GetCurrentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServer).GetCurrentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/General/GetCurrentVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServer).GetCurrentVersion(ctx, req.(*GetCurrentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// General_ServiceDesc is the grpc.ServiceDesc for General service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var General_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "General",
	HandlerType: (*GeneralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _General_Ping_Handler,
		},
		{
			MethodName: "GetCurrentVersion",
			Handler:    _General_GetCurrentVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt.proto",
}
